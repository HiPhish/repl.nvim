*repl.nvim.txt*                                                         {Nvim}

                                                                        *REPL*
              ____  _____ ____  _                  _~
             |  _ \| ____|  _ \| |      _ ____   _(_)_ __ ___~
             | |_) |  _| | |_) | |     | '_ \ \ / / | '_ ` _ \~
             |  _ <| |___|  __/| |___ _| | | \ V /| | | | | | |~
             |_| \_\_____|_|   |_____(_)_| |_|\_/ |_|_| |_| |_|~
                                                  

Author: Alejandro "HiPhish" Sanchez
License: MIT License


==============================================================================
TABLE OF CONTENTS                                         *repl.nvim-contents*

Part I - User manual~
   1. Introduction ...................................... |repl.nvim-intro|
   2. Setup ............................................. |repl.nvim-setup|
   3. Running a REPL .................................... |repl.nvim-running|
   4. Mappings .......................................... |repl.nvim-mappings|
   5. Configuration ..................................... |repl.nvim-config|
   6. Managing REPLs .................................... |repl.nvim-managing|
   7. Included REPLs .................................... |repl.nvim-builtin|
      7.1 Bourne Shell .................................. |repl.nvim-sh|
      7.2 GNU Guile ..................................... |repl.nvim-guile|
      7.3 Python ........................................ |repl.nvim-python|
   8. Defining new REPLs ................................ |repl.nvim-defining|
   9. API ............................................... |repl.nvim-api|

Part II - API reference~
   guess_type ........................................... |repl#guess_type()|

==============================================================================
INTRODUCTION                                          *repl.nvim-introduction*

REPL.nvim provides quick, easy and customisable access to a REPL independent
of language by wrapping itself around Nvim's terminal emulator. This allows
for a quick and fully functional REPL from inside Nvim, but editing text is
limited to the REPL's own interface.

==============================================================================
SETUP                                                        *repl.nvim-setup*

The plugin itself is installed like any other Vim plugin. In addition need to
have the REPL you want to use installed. It does not matter how or where the
binary is located, you can change the setting, but the default is to use the
system's command.

==============================================================================
RUNNING A REPL                                               *repl.nvim-setup*

:Repl [{type} [{arg} ...]]                                             *:Repl*

To spawn a new REPL instance run the `:Repl` command. The first argument is
the type of REPL, if it is omitted the type will be guessed based on the
current |'filetype'| according to |repl#guess_type()|. For instance, if you
are editing a Python file a `'python'` REPL will be spawned. You can also use
modifiers like `:vert`.

If a {type} argument is given that type will be used. However, if the {type}
is `'-'` the type will be guessed again. This allows you to pass arguments to
the REPL without having to specify the type.

All the remaining arguments will be passed in the order they are given to the
REPL binary. Putting it all together, to spawn a Python REPL in a vertical
split with arguments you would run
>
    :Repl python - foo bar
<

To terminate a REPL either delete the buffer or terminate the REPL the same
way you would if it was a standalone process.

------------------------------------------------------------------------------
:Repl! [{type} [{arg} ...]]                                           *:Repl!*

If there is already one or more instances running the command will move the
cursor to the REPL window. To explicitly spawn a new instance use `:Repl!`.


==============================================================================
MAPPINGS                                                  *repl.nvim-mappings*

The following key mappings are available. If no REPL instance is available a
new REPL will be spawned. These mappings will switch the current window to the
REPL. Example of use:
>
    nmap <leader>rs  <Plug>(ReplSend)
    nmap <leader>rss <Plug>(ReplSendLine)
    nmap <leader>rs_ <Plug>(ReplSendLine)

    vmap <leader>rs  <Plug>(ReplSend)
<
You have to use `map` instead of `noremap` and the line-wise action is defined in
case you have `_` remapped somewhere else.

------------------------------------------------------------------------------
<Plug>(ReplSend){motion}                                    *<Plug>(ReplSend)*
{Visual}<Plug>(ReplSend)

Send either the text {motion} moves over or the highlighted text to the REPL.

------------------------------------------------------------------------------
<Plug>(ReplSendLine)                                    *<Plug>(ReplSendLine)*

Send the current line to the REPL. This is a convenience for mapping for the
sequence `<Plug>(ReplSend)_` in case you have remapped `_`.


==============================================================================
CONFIGURATION                                        *repl.nvim-configuration*
                                                                      *g:repl*
                                                                      *t:repl*
                                                                      *w:repl*
                                                                      *b:repl*

All settings are contained inside the `g:repl['type']` dictionary, where
'type' is the type of the REPL. The key is the name of the setting and its
value is the value or a function reference. You can set individual entries
according to your wishes; if you wanted to disable syntax highlighting in the
REPL you would add the following to your `init.vim`:
>
    let g:repl['python'] = {'syntax': ''}
<
You do not have to add the default settings to your dictionary, this plugin is
smart enough to not lose the defaults.

Settings are allowed to be a function reference (or a lambda) to a function
which takes no arguments. This allows you to dynamically generate settings
instead of deciding ahead of time.
>
    let g:repl['python'] = {'syntax': {-> ''}}
<
Note  After Nvim has loaded up do not re-assign the `g:repl` variable, set its
      individual entries instead.

It is also possible to specify local setting by using one of the scopes `t:`, `w:`
or `b:`, with later ones taking precedence. The following is a listing of the
default settings.

Note  The |repl#define_repl()| function provides a safe way of defining or
      modifying the entries of `g:repl`.

------------------------------------------------------------------------------
g:repl['type']['bin']                                  *g:repl['type']['bin']*

Which binary to execute for the REPL. The default uses the system binary.

------------------------------------------------------------------------------
g:repl['type']['args']                                *g:repl['type']['args']*

Which arguments to pass to the executable, these arguments will be passed
before the user-supplied arguments.

------------------------------------------------------------------------------
g:repl['type']['syntax']                            *g:repl['type']['syntax']*
Default: 'scheme'~

Which syntax highlighting to use for the REPL. Use the empty string if you
wish to disable syntax highlighting.

------------------------------------------------------------------------------
:repl['type']['title']                               *g:repl['type']['title']*
Default: 'Guile REPL'~

The value used for the terminal buffer's `b:term_title` variable.


==============================================================================
MANAGING REPL INSTANCES                                      *repl.nvim-setup*

The plugin keeps track of running REPL instances, allowing you to have more
than one per type running at any time. Instances form a sort of stack with
newer ones on top, and they are identified by their job ID (see the manual on
|job-control|).

------------------------------------------------------------------------------
g:repl['type']['instances']                      *g:repl['type']['instances']*

A list of running REPL instances ordered by the time they were spawned, with
younger ones to the begging of the list. See |b:repl['-']| for the format of
the entries.

Note  You should not mutate this list yourself unless you know exactly what
      you are doing. Terminated instances are removed automatically.

------------------------------------------------------------------------------
b:repl['-']                                                      *b:repl['-']*

Every REPL instance buffer is created with this dictionary. It contains the
information about that particular instance and |g:guile_repl['instances']| has a
reference to it. The entries are as follows:
>
   'bin'   : The binary name which was invoked
   'buffer': Buffer number of the REPL
   'args'  : REPL arguments as a list, contains default and user ones
   'job_id': Job ID of the REPL process
<
Note  The instance is stored under the key `'-'` because that is a reserved
      key which will never name-collide with any existing REPL type.


==============================================================================
INCLUDED REPL TYPES                                        *repl.nvim-builtin*

The following REPL types are defined out of the box. The change their default
settings see |repl.nvim-config|.

------------------------------------------------------------------------------
BOURNE SHELL                                                    *repl.nvim-sh*
>
    g:repl.sh : {
        'bin': 'sh',
        'args': [],
        'syntax': '',
        'title': 'Bourne Shell',
    }
<
The Bourne Shell defaults to your system `sh` binary. Beware that this  might
actually be the Bourne Again Shell (`bash`) under the hood.

------------------------------------------------------------------------------
GNU GUILE                                                    *repl.nvim-guile*
>
    g:repl.guile = {
        'bin': 'guile',
        'args': ['-L', '.'],
        'syntax': 'scheme',
        'title': 'Guile REPL',
    }
<
The arguments add the current working directory to the module load path.

------------------------------------------------------------------------------
PYTHON                                                      *repl.nvim-python*
>
    g:repl.python = {
        'bin': 'python',
        'args': [],
        'syntax': '',
        'title': 'Python REPL',
    }
<
The shell default Python interpreter is used. This works nicely with virtual
environments where `python` defaults to the binary of the environment.

------------------------------------------------------------------------------
R7RS                                                          *repl.nvim-r7rs*

There are two variations of R7RS, called R7RS small and R7RS large
respectively. The large language has not been fully standardised yet, so only
the small one is supported at the moment. The 'r7rs' REPL is an alias for
'r7rs-small'
>
    g:repl.r7rs-small = {
        'bin': 'chibi-scheme',
        'args': ['-I', '.'],
        'syntax': '',
        'title': 'Chibi Scheme',
    }
<
Chibi Scheme is a very small implementation of the R7RS, so this seems to be
a reasonably universal choice. The arguments will add the current working
directory to the front of the load path list.

------------------------------------------------------------------------------
SCHEME                                                      *repl.nvim-scheme*

See |repl.nvim-r7rs|.

------------------------------------------------------------------------------
BOURNE SHELL                                                    *repl.nvim-sh*
>
    g:repl.sh = {
        'bin': 'sh',
        'args': [],
        'syntax': '',
        'title': 'Bourne Shell',
    }
<
The Bourne shell is basically like executing the |:terminal| command.


==============================================================================
DEFINING NEW REPL TYPES                                      *repl.nvim-setup*

Plugin authors can define new types of REPL to integrate with REPL.nvim as
standalone plugins. You must define a dictionary for the new REPL type that
specifies all the necessary information (see |repl.nvim-builtin| for
comaprison) and pass it as an argument to |repl#define_repl|. As an example,
here is how we can define a Ruby REPL:
>
    let ruby_repl = {
        \ 'bin': 'irb',
        \ 'args': [],
        \ 'syntax': 'ruby',
        \ 'title': 'Ruby REPL',
    \ }

    " Throw an error if there is already a Ruby REPL defined
    call repl#define_repl('ruby', ruby_repl, 'error')
<
If you want to place this definition inside a file it must be sourced after
the normal plugin files, e.g. by putting it inside the |after-directory|.


==============================================================================
API                                                            *repl.nvim-api*

The API provides users with a public interface to control REPL.nvim from a
higher level. You can use the API with your own configuration or to provide
REPL integration with other plugins.


------------------------------------------------------------------------------
repl#guess_type({ft})                                      *repl#guess_type()*

Tries to guess the type of the REPL based on the file type string {ft}.

Arguments:~
  {ft}  File type string according to |filetype|

Returns:~
  A matching REPL type if one was found.

Throws:~
  `'nomatch'`  No matching REPL type was found


For atomic types this means looking up {ft} as the key into `g:repl`. For
compound file types (see |'ft'|) a number of combinations are tried; first
{ft} is split on the dots and all the atomic types are tried from left to
right. Then progressively larger combinations of the atomic types are tried
with the complete {ft} string being last. The last successfully matching
combination is returned.

Example  If {ft} is `'a.b.c'` the following combinations are tried in this
         order: `'a'`, `'b'`, `'c'`, `'a.b'`, `'b.c'`, `'a.b.c'`

As a rule of thumb remember: the more to the right, the more specific the
type, and more complex types take precedence over simpler ones.


------------------------------------------------------------------------------
repl#define_repl({type}, {repl}, {force})                 *repl#define_repl()*

Defines a new REPL or extends and existing one. If the {repl} has not yet be
defined it is added to |g:repl| as a new entry. Otherwise the behaviour
depends on the value of the {force} argument.

Arguments:~
  {type}   The type of the REPL, it will be used as a key into |g:repl|
  {repl}   Dictionary of settings for the new REPL
  {force}  Either 'keep', 'force' or 'error'; this argument tells the function
           what to do if {type} is already in |g:repl|. The behaviour is the
           same as that of the third argument to |extend()|.

Use this function to define a new REPL instead of assigning entries to
|g:repl| manually. A value of 'force' is particularly useful because it allows
overriding existing options:
>
    call repl#define_repl('python', {'bin': 'python3'}, 'force')
<
This will change the binary, but leave other options as they are.

------------------------------------------------------------------------------


==============================================================================
 vim:tw=78:ts=8:ft=help:norl:

